name: Deploy to Staging

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend-config="environment=staging"

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -var="environment=staging" -var="db_username=${{ secrets.DB_USERNAME }}" -var="db_password=${{ secrets.DB_PASSWORD }}" -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: projectcobra/frontend:staging,projectcobra/frontend:${{ github.sha }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/client-api
          push: true
          tags: projectcobra/backend:staging,projectcobra/backend:${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name project-cobra-staging --region us-east-1

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl create secret generic project-cobra-secrets \
            --namespace=project-cobra \
            --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --from-literal=STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            --from-literal=STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }} \
            --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/services.yaml
          kubectl set image deployment/frontend-deployment frontend=projectcobra/frontend:${{ github.sha }} -n project-cobra
          kubectl set image deployment/backend-deployment backend=projectcobra/backend:${{ github.sha }} -n project-cobra

  vercel-deploy:
    name: Deploy to Vercel Staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          cd frontend
          vercel deploy --token ${{ secrets.VERCEL_TOKEN }} --prod --yes --scope ${{ secrets.VERCEL_ORG_ID }} --name project-cobra-staging
