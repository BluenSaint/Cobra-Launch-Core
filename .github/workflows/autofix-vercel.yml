name: Agent Fixer - Autofix Vercel Deployment Issues

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-and-fix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Verify lock file
        run: |
          cd project-cobra
          if [ ! -f package-lock.json ] && [ ! -f yarn.lock ]; then
            echo "Error: No lock file found. Please commit a lock file to the repository."
            exit 1
          fi

      - name: Install dependencies
        run: |
          cd project-cobra
          npm ci

      - name: Attempt build and capture logs
        id: build_attempt
        run: |
          cd project-cobra
          npm run build > ../build.log 2>&1 || echo "::set-output name=build_failed::true"
        continue-on-error: true

      - name: Check for module resolution errors
        id: check_errors
        if: steps.build_attempt.outputs.build_failed == 'true'
        run: |
          grep -E "Module not found|Can't resolve" build.log > module_errors.txt || true
          if [ -s module_errors.txt ]; then
            echo "::set-output name=has_module_errors::true"
            cat module_errors.txt
          fi

      - name: Parse and fix module errors
        id: fix_modules
        if: steps.check_errors.outputs.has_module_errors == 'true'
        run: |
          # Create a script to parse and fix module errors
          cat << 'EOF' > fix_modules.js
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          // Read the error log
          const errorLog = fs.readFileSync('module_errors.txt', 'utf8');
          const errors = errorLog.split('\n').filter(Boolean);

          // Extract module paths
          const missingModules = [];
          errors.forEach(error => {
            const match = error.match(/(?:Can't resolve|Module not found)(?::|,) '([^']+)'/);
            if (match && match[1]) {
              missingModules.push(match[1]);
            }
          });

          console.log('Missing modules detected:', missingModules);

          // Process each missing module
          let fixedSomething = false;
          missingModules.forEach(modulePath => {
            // Handle @/ paths
            if (modulePath.startsWith('@/')) {
              const relativePath = modulePath.replace('@/', 'src/');
              
              // Check if this is a named import or a directory import
              const lastSegment = relativePath.split('/').pop();
              const isNamedImport = lastSegment.includes('.') || /^[A-Z]/.test(lastSegment);
              
              // Determine file type and directory
              let fullPath;
              let fileContent;
              let directory;
              
              if (isNamedImport) {
                fullPath = `project-cobra/${relativePath}`;
                directory = path.dirname(fullPath);
                
                // Default content based on file extension
                if (fullPath.endsWith('.ts')) {
                  fileContent = `// Auto-generated placeholder by Agent Fixer\nexport default {};\n`;
                } else if (fullPath.endsWith('.tsx')) {
                  fileContent = `// Auto-generated placeholder by Agent Fixer\nimport React from 'react';\nexport default function AutoFixedComponent() {\n  return <div>Auto-fixed component placeholder</div>;\n}\n`;
                } else {
                  // Default to TypeScript
                  fullPath = `project-cobra/${relativePath}.ts`;
                  directory = path.dirname(fullPath);
                  fileContent = `// Auto-generated placeholder by Agent Fixer\nexport default {};\n`;
                }
              } else {
                // It's a directory import, so create an index.ts file
                directory = `project-cobra/${relativePath}`;
                fullPath = `${directory}/index.ts`;
                fileContent = `// Auto-generated placeholder by Agent Fixer\nexport default {};\n`;
              }
              
              // Create directory if it doesn't exist
              try {
                execSync(`mkdir -p "${directory}"`);
                console.log(`Created directory: ${directory}`);
              } catch (err) {
                console.error(`Failed to create directory ${directory}:`, err);
              }
              
              // Create file if it doesn't exist
              if (!fs.existsSync(fullPath)) {
                try {
                  fs.writeFileSync(fullPath, fileContent);
                  console.log(`Created file: ${fullPath}`);
                  fixedSomething = true;
                } catch (err) {
                  console.error(`Failed to create file ${fullPath}:`, err);
                }
              }
            }
          });

          // Check and update next.config.js if needed
          const nextConfigPath = 'project-cobra/next.config.js';
          if (fs.existsSync(nextConfigPath)) {
            let configContent = fs.readFileSync(nextConfigPath, 'utf8');
            
            // Check for and fix experimental.serverComponentsExternalPackages
            if (configContent.includes('serverComponentsExternalPackages')) {
              configContent = configContent.replace(
                /experimental: \{\s*serverComponentsExternalPackages: \[\],?\s*\}/,
                'experimental: {}, // Fixed by Agent Fixer'
              );
              fs.writeFileSync(nextConfigPath, configContent);
              console.log('Fixed next.config.js: Removed deprecated serverComponentsExternalPackages');
              fixedSomething = true;
            }
            
            // Check for and fix swcMinify
            if (configContent.includes('swcMinify')) {
              configContent = configContent.replace(
                /swcMinify: (true|false),?\s*/,
                '// swcMinify removed by Agent Fixer\n  '
              );
              fs.writeFileSync(nextConfigPath, configContent);
              console.log('Fixed next.config.js: Removed deprecated swcMinify');
              fixedSomething = true;
            }
          }

          // Signal if we fixed something
          if (fixedSomething) {
            fs.writeFileSync('fixes_applied', 'true');
          }
          EOF
          
          # Execute the script
          node fix_modules.js
          
          # Set output based on whether fixes were applied
          if [ -f "fixes_applied" ]; then
            echo "::set-output name=fixes_applied::true"
          fi

      - name: Create branch for fixes
        if: steps.fix_modules.outputs.fixes_applied == 'true'
        run: |
          git config --global user.name "${{ env.BOT_NAME || 'Agent Fixer' }}"
          git config --global user.email "${{ env.BOT_EMAIL || 'github-actions@github.com' }}"
          
          # Create a unique branch name
          BRANCH_NAME="autofix/vercel-deployment-$(date +%s)"
          git checkout -b $BRANCH_NAME
          
          # Add and commit changes
          git add .
          git commit -m "Autofix: Resolved broken imports and missing files"
          
          # Push the branch
          git push origin $BRANCH_NAME
          
          # Store branch name for PR creation
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.fix_modules.outputs.fixes_applied == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Autofix: Resolved broken imports and missing files"
          title: "[Needs Review] AutoFix for Vercel Build Failure - Commit ${{ github.sha }}"
          body: |
            This PR was automatically created by the Agent Fixer workflow.
            
            ## Changes Made:
            - Fixed missing module imports
            - Created placeholder files for missing modules
            - Updated configuration files if needed
            
            ## Build Errors Fixed:
            ```
            $(cat module_errors.txt)
            ```
            
            Please review and merge this PR to fix Vercel deployment issues.
          branch: ${{ env.BRANCH_NAME }}
          base: main
          labels: "needs-review, automated-pr" 